# !/usr/bin/env python3

#!/usr/bin/env python3

# Main.py file generated by New Project wizard

# Created:   ter dez 14 2021
# Processor: RPI3
# Compiler:  Python 3 (Proteus)

# Modules
from goto import *
import time
import var
import pio
import resource

# Peripheral Configuration Code (do not edit)
#---CONFIG_BEGIN---
import cpu
import FileStore
import VFP

import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BOARD)

#define the pin that goes to the circuit
pin_to_circuit = 5

def rc_time (pin_to_circuit):
    count = 0
  
    #Output on the pin for 
    GPIO.setup(pin_to_circuit, GPIO.OUT)
    GPIO.output(pin_to_circuit, GPIO.LOW)
    time.sleep(0.1)

    #Change the pin back to input
    GPIO.setup(pin_to_circuit, GPIO.IN)
  
    #Count until the pin goes high
    while (GPIO.input(pin_to_circuit) == GPIO.LOW):
        count += 1

    return count

#Catch when script is interrupted, cleanup correctly
try:
    # Main loop
    while True:
        print(rc_time(pin_to_circuit))
except KeyboardInterrupt:
    pass
finally:
    GPIO.cleanup()

def peripheral_setup () :
# Peripheral Constructors
	pio.cpu=cpu.CPU ()
	pio.storage=FileStore.FileStore ()
	pio.server=VFP.VfpServer ()
	pio.storage.begin ()
	pio.server.begin (0)
# Install interrupt handlers

def peripheral_loop () :
	luminosity=rc_time(pin_to_circuit)
	print(luminosity)
	pass

#---CONFIG_END---

# Main function
def main () :
# Setup
	peripheral_setup()
# Infinite loop
	while 1 :
		peripheral_loop()
	pass
# Command line execution
if __name__ == '__main__' :
	main()
